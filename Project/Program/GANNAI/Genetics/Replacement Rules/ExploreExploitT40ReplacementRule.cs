using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Utility;

namespace Genetics {


    /// <summary>
    /// Switches between two Replacement Rules, depending on the diversity of the population
    /// When diversity is high: SingleParentElitism
    /// When diversity is low: AncestorElitism
    /// </summary>
    public class ExploreExploitT40ReplacementRule : ReplacementRule {
        
        ReplacementRule highDiversityRule = new SingleParentElitismReplacementRule();
        ReplacementRule lowDiversityRule = new AncestorElitismReplacementRule();
        double diversityThreshold = 0.4;
        
        public void Merge(SortList<AIPlayer> individuals, List<AIPlayer> offspring, Simulation simulation) {
            if (simulation.Population.MeasureDiversity() >= diversityThreshold)
                highDiversityRule.Merge(individuals, offspring, simulation);
            else
                lowDiversityRule.Merge(individuals, offspring, simulation);
        }
    }
}
