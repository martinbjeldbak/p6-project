using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Utility;

namespace Genetics {


    /// <summary>
    /// Uses SingleParentElitism and performs a 50% extinction when diversity gets below threshold
    /// </summary>
    public class ExploreExploitB30ReplacementRule : ReplacementRule {
        
        ReplacementRule replacementRule = new SingleParentElitismReplacementRule();
        double diversityThreshold = 0.3;
        
        public void Merge(SortList<AIPlayer> individuals, List<AIPlayer> offspring, Simulation simulation) {
            if (simulation.Population.MeasureDiversity() < diversityThreshold) {
                individuals.Crop(individuals.Count / 2);
                int immigrants = simulation.PopulationSize - individuals.Count;
                for (int i = 0; i < immigrants; i++) {
                    AIPlayer aip = new AIPlayer(simulation.NeuralNetworkMaker);
                    aip.CalcFitness(simulation.Game);
                    individuals.Add(aip);
                }
            }
            replacementRule.Merge(individuals, offspring, simulation);
        }
    }
}
